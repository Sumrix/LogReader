<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:views="clr-namespace:LogReader.Desktop.Views"
        xmlns:viewModels="using:LogReader.Desktop.ViewModels"
        xmlns:helpers="clr-namespace:LogReader.Desktop.Helpers"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="LogReader.Desktop.Views.ShellWindow"
        x:DataType="viewModels:ShellViewModel"
        Icon="/Assets/LogReader.ico" 
        Title="Log Reader"
        FontFamily="Segoe UI, Segoe Fluent Icons"
        Background="{StaticResource WindowBackground}"
        Width="{Binding UserSettings.WindowWidth, Mode=TwoWay}"
        Height="{Binding UserSettings.WindowHeight, Mode=TwoWay}"
        ToolTip.ShowDelay="500">

    <!-- Using DesignInstance for design-time data context -->
    <Design.DataContext>
        <viewModels:ShellViewModel />
    </Design.DataContext>
    
    <!-- Resources are defined for reuse throughout the window -->
    <Window.Resources>
        <system:Int32 x:Key="MaxHeaderLength">18</system:Int32>
        <helpers:OneTimeOneWayToSourceConverter x:Key="WindowStateConverter">
            <helpers:OneTimeOneWayToSourceConverter.ChildConverter>
                <helpers:BoolToObjectConverter TrueObject="{x:Static WindowState.Maximized}"
                                               FalseObject="{x:Static WindowState.Normal}"/>
            </helpers:OneTimeOneWayToSourceConverter.ChildConverter>
        </helpers:OneTimeOneWayToSourceConverter>
    </Window.Resources>

    <!-- Two-way binding with a converter for window state -->
    <Window.WindowState>
        <Binding Path="UserSettings.IsMaximized"
                 Converter="{StaticResource WindowStateConverter}"
                 Mode="TwoWay"/>
    </Window.WindowState>

    <!-- Behaviors for window actions -->
    <Interaction.Behaviors>
        <helpers:WindowPositionBehavior PositionX="{Binding UserSettings.WindowLeft}"
                                        PositionY="{Binding UserSettings.WindowTop}"/>
        <EventTriggerBehavior EventName="Activated">
            <InvokeCommandAction Command="{Binding OnActivated}"/>
        </EventTriggerBehavior>
        <EventTriggerBehavior EventName="Closing">
            <InvokeCommandAction Command="{Binding SaveSettingsCommand}"/>
        </EventTriggerBehavior>
    </Interaction.Behaviors>

    <!-- Main layout container -->
    <DockPanel>

        <!-- Menu bar for file operations -->
        <Menu DockPanel.Dock="Top">
            <!-- Bindings for menu commands -->
            <MenuItem Header="_File" ToolTip.Tip="File operations">
                <MenuItem Header="&#xe8e5; _Open File..."
                          Command="{Binding OpenFile}"
                          ToolTip.Tip="Open a single file"/>
                <MenuItem Header="&#xe838; _Open Folder..."
                          Command="{Binding OpenDirectory}"
                          ToolTip.Tip="Open a directory of files"/>
                <MenuItem Header="&#xe8b7; _Close Folder"
                          Command="{Binding CloseDirectory}"
                          CommandParameter="{Binding #Directories.SelectedIndex}"
                          ToolTip.Tip="Close the selected directory"/>
                <Separator/>
                <MenuItem Header="&#xe711; _Exit"
                          Command="{Binding Exit}"
                          ToolTip.Tip="Exit application"/>
            </MenuItem>
        </Menu>

        <!-- Tab control for open directories -->
        <TabControl Name="Directories"
                    DockPanel.Dock="Top"
                    ItemsSource="{Binding Directories}"
                    SelectedItem="{Binding SelectedDirectory, Mode=TwoWay}"
                    Margin="0,5,0,0"
                    Padding="0"
                    Background="{StaticResource ControlBackground}">

            <!-- Template for tab header, applying string truncation -->
            <TabControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Path, Converter={x:Static helpers:StringTruncationConverter.Left},
                                                    ConverterParameter={StaticResource MaxHeaderLength}}"
                               ToolTip.Tip="{Binding Path}"/>
                </DataTemplate>
            </TabControl.ItemTemplate>

            <!-- Content template for tabs -->
            <TabControl.ContentTemplate>
                <DataTemplate>
                    <views:DirectoryView />
                </DataTemplate>
            </TabControl.ContentTemplate>

        </TabControl>

    </DockPanel>
</Window>